// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  FEATURE
  BUG_FIX
  REFACTOR
  TESTING
  DOCUMENTATION
  CODE_REVIEW
  DEPLOYMENT
  RESEARCH
  OPTIMIZATION
  MAINTENANCE
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tasks             Task[]
  completedTasks    Task[]   @relation("TaskCompletedBy")
  taskStats         TaskStats[]

  @@map("users")
}

model Task {
  id              String    @id @default(cuid())
  title           String
  description     String?
  completed       Boolean   @default(false)
  priority        Priority  @default(MEDIUM)
  type            TaskType  @default(FEATURE)
  taskDate        DateTime  @default(now())
  startTime       DateTime?
  endTime         DateTime?
  completedAt     DateTime?
  completedById   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedBy     User?     @relation("TaskCompletedBy", fields: [completedById], references: [id])

  @@map("tasks")
}

model TaskStats {
  id                  String   @id @default(cuid())
  userId              String
  date                DateTime @default(now())
  tasksCompleted      Int      @default(0)
  tasksByType         Json     @default("{}")
  tasksByPriority     Json     @default("{}")
  totalHoursWorked    Float?   @default(0)
  averageCompletionTime Float? @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("task_stats")
}
